;;
;; Database/Collection.egi
;;

;(define $edge-table
;  (relational-matcher
;    <edge ["from_id" integer]
;          ["to_id" integer]>))


;; Above code generates the following code.
;; 'relational-matcher' is a sytax sugar.
(define $edge-table
  (matcher
    {[<cons <edge ,$px ,$py> $> [edge-table]
      ; select * from edge where from_id = px and to_id = py
      {[$tgt (match (unsafeIO (sql (conn tgt) (simple-select {"*"} tgt {["from_id" (itos px)] ["to_id" (itos py)]}))) (list edge)
               {[<nil> {}]
                [_ {tgt}]})]}]
     [<cons <edge ,$px $> $> [integer edge-table]
      ; select to_id from edge where from_id = px
      {[$tgt (map (lambda [$x] [(stoi x) tgt]) (simple-select {"to_id"} tgt {["from_id" (itos px)]}))]}]
     [<cons <edge $ ,$px> $> [integer edge-table]
      ; select from_id from edge where to_id = px
      {[$tgt (map (lambda [$x] [(stoi x) tgt]) (simple-select {"from_id"} tgt {["to_id" (itos px)]}))]}]
     [$ [something]
      {[$tgt {tgt}]}]
     }))

(define $main
  (lambda [$argv]
    (do {[$conn (mysql "graph")]
         [(write v)]
         [(write-char '\n')]}
        [])))


(define $edge-data <Table "edge">)