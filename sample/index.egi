(test (match-all {1 2 3 4 5} (list integer)
        [(index-loop $l $p $i $a (between 1 2)
           <join _ <cons p_i l>>
           _)
         [a_1 a_2]]))

(test (match-all {1 2 3 4 5} (multiset integer)
        [(index-loop $l $p $i $a (between 1 2)
           <cons p_i l>
           _)
         [a_1 a_2]]))

(define $npc
  (pattern-function [$p]
    p))

(define $pc
  (pattern-function [$p]
    (npc p)))

(test (match-all {1 2 3 4 5} (multiset integer)
        [<cons (pc $a) _> a]))

(test (match-all {1 2 3 4 5} (multiset integer)
        [<cons (pc $a_1) _> a]))

(test (match-all {1 2 3 4 5} (multiset integer) [<cons $a_1_1 _> a])) {[| [| 1 |] |] [| [| 2 |] |] ...  [| [| 5 |] |]}

(define $pc1
  (pattern-function [$p]
    p_1))

(test (match-all {1 2 3 4 5} (multiset integer)
        [<cons (pc1 $a) _> a]))

(define $pc2
  (pattern-function [$p]
    p_1))

(test (match-all {1 2 3 4 5} (multiset integer)
        [<cons (pc2 $a_1) _> a]))

(define $comb
  (lambda [$ns]
    (match ns (list something)
      {[<nil> (pattern-function [$p] _)]
       [<cons $i $rs> 
        (pattern-function [$p]
          <join _ <cons p_i ((comb rs) p)>>)]})))


(test (match-all {1 2 3 4 5} (list integer)
        [((comb (between 1 2)) $a) a]))

(test (match-all {{1 2 3} {11 12 13} {21 22 23}} (list (list integer))
        [(index-loop $l1 $p1 $i1 $a (between 1 3)
           <cons (index-loop $l2 $p2 $i2 p1 (between 1 3)
                   <cons p2_i1_i2 l2>
                   <nil>)
                 l1>
           <nil>)
         a]))
