(define $npc
  (pattern-constructor [$p]
    p))

(define $pc
  (pattern-constructor [$p]
    (npc p)))

(test (match-all {1 2 3 4 5} (multiset integer)
        [<cons (pc $a) _> a]))

(test (match-all {1 2 3 4 5} (multiset integer) [<cons $a_1_1 _> a]))

(define $pc1
  (pattern-constructor [$p]
    p_1))

(test (match-all {1 2 3 4 5} (multiset integer)
        [<cons (pc1 $a) _> a]))

(define $pc2
  (pattern-constructor [$p]
    p_2))

(test (match-all {1 2 3 4 5} (multiset integer)
        [<cons (pc2 $a_1) _> a_2_1]))

(define $comb
  (lambda [$ns]
    (match ns (list something)
      {[<nil> (pattern-constructor [$p] _)]
       [<cons $i $rs> 
        (pattern-constructor [$p]
          <join _ <cons p_i ((comb rs) p)>>)]})))

(test (match-all {1 2 3 4 5} (list integer)
        [((comb (between 1 2)) $a) a]))

(test (match-all {{1 2 3} {11 12 13} {21 22 23}} (list (list integer))
        [(index-loop $l1 $p1 $i1 $a (between 1 3)
                     <cons (index-loop $l2 $p2 $i2 p1 (between 1 3)
                                       <cons p2_i1_i2 l2>
                                       <nil>)
                           l1>
                     <nil>)
         a]))
