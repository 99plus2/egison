;;;;;
;;;;;
;;;;; Sum of Squares
;;;;;
;;;;;

; Infintite list of sum of squres.
; -- [m {p1 p2 ...}]
(define $p-fs (map (lambda [$n] [n (p-f n)]) nats))

; sample output
(define $p-fs-c (take 1000 p-fs))

(define $p-fs-c-n
  (lambda [$n]
    (match-all p-fs-c (list [integer (list integer)])
      [<join _ <cons [$m (loop $i [1 ,n] <cons $p_i ...> <nil>)] _>> [m (map (lambda [$i] p_i) (between 1 n))]])))

(define $p-fs-c-1 (p-fs-c-n 1))
(test p-fs-c-1)
(test (length p-fs-c-1))

(define $p-fs-c-2 (p-fs-c-n 2))
(test p-fs-c-2)
(test (length p-fs-c-2))

(define $p-fs-c-3 (p-fs-c-n 3))
(test p-fs-c-3)
(test (length p-fs-c-3))

(define $p-fs-c-4 (p-fs-c-n 4))
(test p-fs-c-4)
(test (length p-fs-c-4))

(define $p-fs-c-5 (p-fs-c-n 5))
(test p-fs-c-5)
(test (length p-fs-c-5))

(define $p-fs-c-6 (p-fs-c-n 6))
(test p-fs-c-6)
(test (length p-fs-c-6))

(define $p-fs-c-7 (p-fs-c-n 7))
(test p-fs-c-7)
(test (length p-fs-c-7))

(define $p-fs-c-8 (p-fs-c-n 8))
(test p-fs-c-8)
(test (length p-fs-c-8))

(define $p-fs-c-9 (p-fs-c-n 9))
(test p-fs-c-9)
(test (length p-fs-c-9))

(define $p-fs-c-10 (p-fs-c-n 10))
(test p-fs-c-10)
(test (length p-fs-c-10))
