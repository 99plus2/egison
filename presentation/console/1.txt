EGISON /home/egi/egison3/presentation% egison
egison
Egison Version 3.2.5 (C) 2011-2014 Satoshi Egi
http://www.egison.org
Welcome to Egison Interpreter!
> (p-f 10)
(p-f 10)
{2 5}
> (p-f 30)
(p-f 30)
{2 3 5}
> (take 10 (map p-f nats))
(take 10 (map p-f nats))
{{} {2} {3} {2 2} {5} {2 3} {7} {2 2 2} {3 3} {2 5}}
> (take 10 (filter (match-lambda (multiset integer) {[<cons ,2 _> #t] [_ #f]}) (map p-f nats)))
(map p-f nats)))
{{2} {2 2} {2 3} {2 2 2} {2 5} {2 2 3} {2 7} {2 2 2 2} {2 3 3} {2 2 5}}
> (take 10 (filter (match-lambda (multiset integer) {[<cons ,2 <cons ,2 _>> #t] [_ #f]}) (map p-f nats)))
 [_ #f]}) (map p-f nats)))
{{2 2} {2 2 2} {2 2 3} {2 2 2 2} {2 2 5} {2 2 2 3} {2 2 7} {2 2 2 2 2} {2 2 3 3} {2 2 2 5}}
> (take 10 (filter (match-lambda (multiset (mod 4)) {[<cons ,1 <cons ,1 _>> #t] [_ #f]}) (map p-f nats)))
 [_ #f]}) (map p-f nats)))
{{5 5} {2 5 5} {5 13} {3 5 5} {5 17} {2 2 5 5} {5 5 5} {2 5 13} {5 29} {2 3 5 5}}
> (take 100 (filter (match-lambda (multiset (mod 4)) {[<cons ,1 <cons ,1 _>> #t] [_ #f]}) (map p-f nats)))
] [_ #f]}) (map p-f nats)))
{{5 5} {2 5 5} {5 13} {3 5 5} {5 17} {2 2 5 5} {5 5 5} {2 5 13} {5 29} {2 3 5 5} {13 13} {2 5 17} {5 5 7} {5 37} {3 5 13} {2 2 2 5 5} {5 41} {13 17} {3 3 5 5} {2 5 5 5} {3 5 17} {2 2 5 13} {5 53} {5 5 11} {17 17} {2 5 29} {2 2 3 5 5} {5 61} {5 5 13} {2 13 13} {2 2 5 17} {2 5 5 7} {5 73} {2 5 37} {3 5 5 5} {13 29} {2 3 5 13} {2 2 2 2 5 5} {2 5 41} {5 5 17} {3 5 29} {2 13 17} {5 89} {2 3 3 5 5} {5 7 13} {5 5 19} {13 37} {5 97} {17 29} {2 2 5 5 5} {5 101} {3 13 13} {2 3 5 17} {2 2 2 5 13} {3 5 5 7} {2 5 53} {13 41} {5 109} {2 5 5 11} {3 5 37} {5 113} {5 5 23} {2 17 17} {2 2 5 29} {3 3 5 13} {5 7 17} {2 2 2 3 5 5} {2 5 61} {3 5 41} {5 5 5 5} {17 37} {2 5 5 13} {3 13 17} {3 3 3 5 5} {2 2 13 13} {2 2 2 5 17} {5 137} {13 53} {17 41} {2 2 5 5 7} {5 11 13} {5 5 29} {2 5 73} {2 2 5 37} {5 149} {2 3 5 5 5} {2 13 29} {3 3 5 17} {5 5 31} {2 2 3 5 13} {5 157} {13 61} {3 5 53} {2 2 2 2 2 5 5} {2 2 5 41} {3 5 5 11} {29 29} {5 13 13} {2 5 5 17} {5 173}}
> (take 100 (map (foldl * 1 $) (filter (match-lambda (multiset (mod 4)) {[<cons ,1 <cons ,1 _>> #t] [_ #f]}) (map p-f nats))))
 ,1 <cons ,1 _>> #t] [_ #f]}) (map p-f nats))))
{25 50 65 75 85 100 125 130 145 150 169 170 175 185 195 200 205 221 225 250 255 260 265 275 289 290 300 305 325 338 340 350 365 370 375 377 390 400 410 425 435 442 445 450 455 475 481 485 493 500 505 507 510 520 525 530 533 545 550 555 565 575 578 580 585 595 600 610 615 625 629 650 663 675 676 680 685 689 697 700 715 725 730 740 745 750 754 765 775 780 785 793 795 800 820 825 841 845 850 865}
