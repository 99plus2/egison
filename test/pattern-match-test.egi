(define $twin
  (pattern-constructor [$pat1 $pat2]
    <cons (& pat1 $x) <cons ,x pat2>>))

(test (assert-equal "pattern constructor call"
        (match {1 1 1 2 3} (list integer)
          {[(twin $n $ns) [n ns]]})
        [1 {1 2 3}]))

(define $repeat
  (pattern-constructor [$pat]
    (| <nil>
       <cons (& pat $x) (repeat ,x)>)))

(test (assert-equal "recursive pattern constructor call"
        (match {1 1 1 1} (list integer)
          {[(repeat $n) n]})
        1))

(define $nat {1 @(map (+ $ 1) nat)})

(test (assert-equal "pairs of 2 natural numbers"
        (take 10 (match-all nat (set integer)
                   [<cons $m <cons $n _>> [m n]]))
        {[1 1] [1 2] [2 1] [1 3] [2 2] [3 1] [1 4] [2 3] [3 2] [4 1]}))

(test (assert-equal "pairs of 2 different natural numbers"
        (take 10 (match-all nat (list integer)
                   [<join _ <cons $m <join _ <cons $n _>>>> [m n]]))
        {[1 2] [1 3] [2 3] [1 4] [2 4] [3 4] [1 5] [2 5] [3 5] [4 5]}))
