;;;;;
;;;;; Design of Egison3
;;;;;

;;;
;;; Type system
;;;

;;
;; Type Examples
;;

;
; Data which defines how to pattern-match is called `matcher'.
; A mather is defined with a matcher expression.
; A mather expression takes primitive-match-clauses as a type expression of Egison2.
; The type of matcher is `(Matcher <target-type>)'.
; `Matcher' is primitive-pattern-constructor as `\'.
;
(define $integer
  (matcher
    {[,$val []
      {[$tgt (if (eq-integer? val tgt)
                 {[]}
                 {})]}]
     [$ [something]
      {[$tgt {tgt}]}]}))

(define $mod
  (lambda [$m]
    (matcher
      {[,$val []
        {[$tgt (if (eq-integer? (modulo val m) (modulo tgt m))
                   {[]}
                   {})]}]
       [$ [integer]
        {[$tgt {(modulo tgt m)}]}]
       })))

;
; `function' expression is like `match-lambda' of other languages.
;
(define $list
  (lambda [$a]
    (matcher
      {[,$val []
        {[$tgt (if ((equal-list? a) val tgt)
                   {[]}
                   {})]}]
       [<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ $> [a (list a)]
        {[{$x @$xs} {[x xs]}]
         [_ {}]}]
       [<snoc $ $> [a (list a)]
        {[{@$xs $x} {[x xs]}]
         [_ {}]}]
       [<join ,$hs $> [(list a)]
        {[$tgt (letrec {[$looper (function [(list a) (list a)]
                                   {[[<nil> $ys] {ys}]
                                    [[<cons $x $xs2> <cons ,x $ys2>] (looper xs2 ys2)]
                                    [[_ _] {}]})]}
                 (looper hs tgt))]}]
       [<join $ $> [(list a) (list a)]
        {[$tgt (letrec {[$looper (lambda [$ret $xs $ys]
                                   (match ys (list a)
                                     {[<nil> {@ret [xs {}]}]
                                      [<cons $y $ys2> (looper {@ret [xs ys]} {@xs y} ys2)]}))]}
                 (looper {} {} tgt))]}]
       [<nioj ,$ts $> [(list a)]
        {[$tgt (letrec {[$looper (function [(list a) (list a)]
                                   {[[<nil> $ys] {ys}]
                                    [[<snoc $x $xs2> <snoc ,x $ys2>] (looper xs2 ys2)]
                                    [[_ _] {}]})]}
                 (looper ts tgt))]}]
       [<nioj $ $> [(list a) (list a)]
        {[$tgt (letrec {[$looper (lambda [$ret $xs $ys]
                                   (match ys (list a)
                                     {[<nil> {@ret [xs {}]}]
                                      [<snoc $y $ys2> (looper {[xs ys] @ret} {@xs y} ys2)]}))]}
                 (looper {} {} tgt))]}]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

(define $multiset-normal
  (lambda [$a]
    (matcher
      {[,$val []
        {[$tgt (if ((equal-multiset? a) val tgt)
                   {[]}
                   {})]}]
       [<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ $> [a (multiset a)]
        {[$tgt (match-all tgt (list a)
                 [<join $hs <cons $x $ts>> [x {@hs @ts}]])]}]
       [<join ,$xs $> [(multiset a)]
        {[$tgt (letrec {[$looper (function [(multiset a) (multiset a)]
                                   {[[<nil> $tgt2] {[tgt2]}]
                                    [[<cons $x $xs2> <cons ,x $tgt2>] (looper xs2 tgt2)]
                                    [_ {}]})]}
                 (looper xs tgt))]}]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

;
; Definition of multiset is written also as below.
; * pay atterntion around `cons' matcher clauses.
;
(define $multiset-eq
  (lambda [$a]
    (matcher
      {[,$val []
        {[$tgt (if ((equal-multiset? a) val tgt)
                   {[]}
                   {})]}]
       [<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ _> [a]
        {[$tgt (unique tgt)]}]
       [<cons ,val $> [(multiset a)]
        {[$tgt (match-all tgt (list a)
                 [<join $hs <cons ,val $ts>> [{@hs @ts}]])]}]
       [<join ,$xs $> [(multiset a)]
        {[$tgt (letrec {[$looper (function [(multiset a) (multiset a)]
                                   {[[<nil> $tgt2] {[tgt2]}]
                                     [[<cons $x $xs2> <cons ,x $tgt2>] (looper xs2 tgt2)]
                                     [_ {}]})]}
                 (looper xs tgt))]}]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

(define $set
  (lambda [$a]
    (matcher
      {[<nil> []
        {[{} {[]}]
         [_ {}]}]
       [<cons $ _> [a]
        [$tgt tgt]]
       [<cons _ $> [(set a)]
        [$tgt {tgt}]]
       [$ [something]
        {[$tgt {tgt}]}]
       })))

(define $map
  (lambda [$fn $ls]
    (match ls (list something)
      {[<nil> {}]
       [<cons $x $xs> {(fn x) @(map fn xs)}]})))

(define $remove
  (lambda [$matcher]
    (lambda [$xs $x]
      (match xs (list matcher)
        {[<nil> {}]
         [<cons ,x $rs> rs]
         [<cons $y $rs> {y @((remove a) rs x)}]}))))

(test ((remove (mod 13)) {10 2 14} 1))

(define $match?
  (lambda [$x $y]
    (match [x y] [(data-to-matcher x) (data-to-matcher y)]
      {[[$zs ,zs] #t]
       [_ #f]})))


;;;
;;; Partial evaluation
;;;

;
; e.g. (+ $ 10) => (lambda [$x] (+ x 10))
;      (+3 $2 20 $1) => (lambda [$v1 $v2] (+3 v2 10 v1))
;
((+ $ 10) 5)

((map id $) {1 2 3})

;;
;; predicate pattern
;;

<cons ?(lambda [$x] (lt? x 10)) _>

<cons ?(lt? $ 10) _>

;;;
;;; Pattern-matching examples
;;;

;;
;; pattern function
;;

(define $seq-pat
  (lambda [$var $pat]
    (seq-pat-helper var pat 1)))

(define $seq-pat-helper
  (lambda [$var $pat $i]
    <cons ,(+ `var i) (| (seq-pat-helper var (+ i 1)) pat)))

(loop %l %i (between 1 n) <cons $a_i l> <nil>) <=> (n-pat %a (between 1 n) <nil>)

(define $n-pat
  (lambda [$var $range $pat]
    (match range (list something)
      {[<nil> pat]
       [<cons $i $is> <cons `$var_i (n-pat var is pat)]})))

;;
;; IO
;;

(define $main
  (lambda [$world $args]
    (do {[$world (write world "input : ")]
         [$world (flush world)]
         [[$world $val] (read world)]
         [$world (write world {@"output : " @(show val) @"\n"})]}
        world)))

(define $read-two-line
  (lambda [$world]
    (do {[[$world $line1] (read-line world)]
         [[$world $line2] (read-line world)]}
        [world {@line1 @line2}])))


;;;
;;; Module system
;;;

;;
;; Very simple module system, for now.
;;

(module $json)

(export {encode decode})

(import json)
