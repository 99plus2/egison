(define $collatz
  (lambda [$n]
    (if (even? n)
      (/ n 2)
      (+ (* 3 n) 1))))

(define $proc1
  (memoized-lambda [$n]
    (letrec {[$looper (lambda [$r $n]
                        (if (eq? n 1)
                          (+ 1 r)
                          (looper (+ 1 r) (collatz n))))]}
      (looper 0 n))))

(define $proc
  (lambda [$n]
    (let {[$ret (map proc1 (take n nats))]}
      [(max ret) ret])))

(define $main
  (lambda [$args]
    (do {[(each print (map show (map proc1 (take 1000000 nats))))]}
      [])))

